<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.7">
  <POU Name="Stn100_00_ModeControl" Id="{4b994853-c55e-48b9-aded-7765d55a809d}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Stn100_00_ModeControl
VAR
	pStation: POINTER TO Station;
	pMain: POINTER TO udtCmpBaseMain;
	Local: FrameworkLocal;
	tmrDelayPCStart: TON;
	tmrWritePersistentData: TON;
	tmrWritePersistentDataPulse: TON;
	fbStartPC: NT_StartProcess;
	fbGetTime: GETSYSTEMTIME;
	fbWritePersistentData: FB_WritePersistentData;
	StationResetRequest: BOOL;
	MsgText: STRING256;
	AltMsgText: STRING256;
	FaultText: STRING256;
	FaultAltText: STRING256;
	FaultNumber: INT;
	FaultData: StatsFault;
	StationLevelFault: BOOL;
	TempEvent: StatsEvent;
	TimeStamp: StateTimeStamp;
	CurrentTime: TIMESTRUCT;
	TimeLo: UDINT;
	TimeHi: UDINT;
	cmdStart: BOOL;
	cmdOperatorStop: BOOL;
	cmdMachineStop: BOOL;
	cmdFaultAcknowledge: BOOL;
	cmdFullInit: BOOL;
	cmdFaultReset: BOOL;
	cmdSingleStepOn: BOOL;
	cmdSingleStepOff: BOOL;
	cmdSingleStepAdvance: BOOL;
	cmdManualMode: BOOL;
	OKToStart: BOOL;
	OKToReset: BOOL;
	onsStart: R_TRIG;
	onsOperatorStop: R_TRIG;
	onsMachineStop: R_TRIG;
	onsFaultAcknowledge: R_TRIG;
	onsStationReset: R_TRIG;
	onsFaultReset: R_TRIG;
	onsSingleStepOn: R_TRIG;
	onsSingleStepOff: R_TRIG;
	onsSingleStepAdvance: R_TRIG;
	onsManualMode: R_TRIG;
	onsEStopNotOKHMIMessage: BOOL;
	onsEStopNotOKStartAttmpt: BOOL;
	onsPowerOnAttmpt: BOOL;
	onsAirNotOKHMIMessage: BOOL;
	onsAirNotOKStartAttempt: BOOL;
	onsEStopSafetyEDMErrorHMIMessage: BOOL;
	onsEStopSafetyEDMErrorStartAttempt: BOOL;
	onsGateSafetyEDMErrorHMIMessage: BOOL;
	onsGateSafetyEDMErrorStartAttempt: BOOL;
	onsSortingConvSafetyEDMErrorHMIMessage: BOOL;
	onsSortingConvSafetyEDMErrorStartAttempt: BOOL;
	onsCrossConvSafetyEDMErrorHMIMessage: BOOL;
	onsCrossConvSafetyEDMErrorStartAttempt: BOOL;	
	onsGateNotLockedHMIMessage: BOOL;
	onsPrematureStartAttempt: BOOL;
	onsStartAttemptBeforePreheat: BOOL;
	WaitForResetMsg: BOOL;
	SeparateAckAndReset: BOOL := TRUE;
	bStartingToRun: BOOL;
	b500msPulse: BOOL;
	tmrPulseON: TON;
	tmrPulseOFF: TON;
	tmrState: TON;
	tmrControlPowerPBPressedDelay: TON;
	tmrAirPressureNotOK: TON;
	tmrMoveNCoolTankNotOK: TON;
	tmrOKToStop: TON;
	tmrGateLock: TON;
	cColor: Colors;
	cChannel: Channels;
	cStats: StatsConstants;	
	
	(*Inputs*)
	iEStopOK :BOOL;
	iEStopGateOK: BOOL;
	iEstopMainEnclosurePBReleased: BOOL;
	iEstopGatePBReleased: BOOL;
	iEstopRobotPBReleased: BOOL;
	iEstopGateClosed: BOOL;
	iEstopWrapperPBReleased: BOOL;
	iEstopWrapperGateClosed: BOOL;
	iEStopSafetyEDMError: BOOL;
	iEStopGateSafetyEDMError: BOOL;
	iSortingConveyorSafetyEDMError: BOOL;
	iCrossConveyorSafetyEDMError: BOOL;
	iControlPowerOnPB AT %I*  : BOOL;
	iGateResetPB AT %I*  : BOOL;
	iGateLocked AT %I*  : BOOL;
	// iAirSupplyOK AT %I* : BOOL;
	iWeighRightEStop : BOOL;
	iAirSupplyOK: BOOL;
	iMovenCoolTankFull AT %I*: BOOL;

	(*Outputs*)
	oControlPowerReset: BOOL;
	oControlPowerOnPBLT AT %Q* : BOOL;
	oGateResetPBLT AT %Q* : BOOL;	
	oGateLock AT %Q* : BOOL;
	oStackLightRed AT %Q* : BOOL;
	oStackLightYellow AT %Q* : BOOL;	
	oStackLightGreen AT %Q* : BOOL;
	oStackLightHorn AT %Q* : BOOL;

	(*Operator Inputs*)
	hiGateLock: BOOL;
	hiGateUnlock: BOOL;
	hiTestIndicatorTree: BOOL;
	hiStationDryCycleEnable: BOOL;
	
	(*Operator Outputs*)
	hoCurrentStateModeControl: DINT;
	hoSingleStepEnabled: BOOL := FALSE; 
	hoStationDryCycleEnabled: BOOL := FALSE;
	hoFirstScan: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Globals.gFirstScan THEN
	hoFirstScan := TRUE;
    FaultNumber := 1;
    FaultText := 'PLC changed from Program to Run';
	FaultAltText := 'No Alt Text';
    Local.State := 9999; (*Necessary to get state 0 to execute FirstEntry logic*)
    Local.NextState := 0;
	pStation := ADR(Globals.gStation100);
	pMain := ADR(Globals.gStn100_10_Main);	
	
	Local.pStateTraceBuffer := ADR(Globals.gStn100_StateTraceBuffer);
	Local.pStateTraceFifo := ADR(Globals.gStn100_StateTraceFifo);
	Local.pStats := ADR(Globals.gStn100_02_Stats);
END_IF

(*Delay PC Start*) (*Is this doing anything? If not, delete? JECDebug*)
IF Globals.gFirstScan THEN
	tmrDelayPCStart(IN:=FALSE);
	fbStartPC(START:=FALSE);
ELSE
	tmrDelayPCStart(IN:=TRUE,PT:=T#30S);
END_IF

(*Write persistent data every 10 seconds to insure data is retained*)
tmrWritePersistentData(IN := NOT tmrWritePersistentDataPulse.Q, PT := T#10S);
tmrWritePersistentDataPulse(IN := tmrWritePersistentData.Q, PT := T#2S);
fbWritePersistentData(PORT := 851, START := tmrWritePersistentData.Q, TMOUT := T#5S, MODE := 0);

(*Map Safety IO*)
iEStopOK := 1;
iAirSupplyOK :=1;
(* Map WeighRight EStop*)
iWeighRightEStop := Globals.gWeighRightInputs.3;

(*Copy time components to local tag for display on HMI*)
CurrentTime.wDay := Globals.gCurrentTime.DateTime.wDay;
CurrentTime.wDayOfWeek := Globals.gCurrentTime.DateTime.wDayOfWeek;
CurrentTime.wHour := Globals.gCurrentTime.DateTime.wHour;
CurrentTime.wMilliseconds := Globals.gCurrentTime.DateTime.wMilliseconds;
CurrentTime.wMinute := Globals.gCurrentTime.DateTime.wMinute;
CurrentTime.wMonth := Globals.gCurrentTime.DateTime.wMonth;
CurrentTime.wSecond := Globals.gCurrentTime.DateTime.wSecond;
CurrentTime.wYear := Globals.gCurrentTime.DateTime.wYear;

(*Call Input routine*)
Input();

(*Status from each component*)
pStation^.CycleFaulted := pStation^.FaultedFIFO.Count > 0 OR StationLevelFault;
pStation^.CycleManual := pStation^.CycleManualFIFO.Count > 0;
pStation^.Attention := pStation^.AttentionRequiredFIFO.Count > 0;
pStation^.OKToStop := FALSE;
IF (pStation^.NotOKtoStopFIFO.Count = 0) THEN
	tmrOKToStop(IN := TRUE, PT:=T#1.0S);
	IF tmrOKToStop.Q THEN
	    pStation^.OKToStop := TRUE;
	END_IF;
ELSE
    tmrOKToStop(IN := FALSE);
END_IF

(*Check for need of full initialization*)
IF cmdFullInit OR cmdManualMode OR Globals.gFirstScan THEN
	pStation^.FullInitRequired := TRUE;
END_IF

(*Station permissives*)
pStation^.OKForManual := NOT pStation^.CycleAuto AND NOT pStation^.CycleReset AND NOT pStation^.EmergencyStop AND pStation^.FullInitRequired;
// OKToReset := NOT pStation^.EmergencyStop AND iAirSupplyOK AND NOT pStation^.CycleManual;
// OKToStart := NOT pStation^.EmergencyStop AND iAirSupplyOK AND NOT pStation^.CycleFaulted AND NOT pStation^.CycleManual;
OKToReset := NOT pStation^.EmergencyStop AND NOT pStation^.CycleManual;
OKToStart := NOT pStation^.EmergencyStop AND NOT pStation^.CycleFaulted AND NOT pStation^.CycleManual;
(*Single Step*)
IF cmdSingleStepOn THEN
	pStation^.SingleStep := 1;
	hoSingleStepEnabled:=TRUE;
ELSIF pStation^.SingleStep AND (cmdSingleStepOff OR Globals.gFirstScan) THEN
	pStation^.SingleStep :=0;
	hoSingleStepEnabled:=FALSE;
END_IF
pStation^.StepAdvance:=pStation^.SingleStep AND cmdSingleStepAdvance;

(*Copy state to local for display on HMI*)
hoCurrentStateModeControl:=Local.State;

(*Mode Logic*)
IF Local.NextState <> Local.State THEN
	Local.FirstEntry := TRUE;
	Local.State := Local.NextState;
	fbGetTime(timeLoDW=>TimeStamp.TimeLo, timeHiDW=>TimeStamp.TimeHi);
	TimeStamp.ID := 0;
	TimeStamp.State := Local.State;
	Local.pStateTraceFifo^.INSERT(pFIFO := Local.pStateTraceBuffer, in := TimeStamp);
	tmrState(IN:=FALSE); (*clear timer if state changes*)
ELSE
	Local.FirstEntry := FALSE;
END_IF

CASE Local.State OF

0:	(*Faulted, Not Acknowledged*)
	IF  Local.FirstEntry THEN
		pStation^.CycleAuto := FALSE;
		pStation^.CycleReset := FALSE;
		pStation^.CycleManual := FALSE;
		(*Log fault event*)
		TempEvent.TimeStamp := Globals.gCurrentTime;
		TempEvent.EType := Globals.cStats.Faulted;
		TempEvent.Data[0] := DINT_TO_REAL(pStation^.FirstFault.FaultID);
		TempEvent.StringData[0] := pStation^.FirstFault.StringData[0];
		F_SendEvent(ADR(Local.pStats^.StatsEventFIFO), ADR(Local.pStats^.StatsEventBuffer), ADR(TempEvent));
	END_IF

	IF cmdFaultAcknowledge OR NOT SeparateAckAndReset THEN
		Local.NextState :=10;
	END_IF

10:	(*Faulted, Acknowledged*)
	IF   Local.FirstEntry THEN
		IF SeparateAckAndReset THEN
			(*Send event fault acknowledge*)
			TempEvent.EType := Globals.cStats.FaultAcknowledge;
			F_SendEvent (ADR(Local.pStats^.StatsEventFIFO ), ADR(Local.pStats^.StatsEventBuffer), ADR(TempEvent));
			pStation^.StationMessage.Text :='Fault Acknowledged';
			pStation^.StationMessage.AltText :='Error reconocido';
			pStation^.StationMessage.Color := cColor.Grey;
			F_AddMessage(pStation, 'Fault Acknowledged', '', cColor.Grey, cChannel.General);
		END_IF
		WaitForResetMsg := TRUE;
	END_IF

	IF OKToReset  THEN
		IF WaitForResetMsg AND SeparateAckAndReset  THEN
			WaitForResetMsg := FALSE;
			IF pStation^.FullInitRequired THEN
				MsgText := 'FULL INITIALIZATION REQUIRED.  Waiting for Station Reset';
			ELSE
				MsgText := 'Waiting for Station or Fault Reset';
			END_IF
			AltMsgText := 'Esperando confirmación de estación o falla';
			pStation^.StationMessage.Text :=MsgText;
			pStation^.StationMessage.AltText :=AltMsgText;
			pStation^.StationMessage.Color := cColor.Grey;
			F_AddMessage(pStation, MsgText, AltMsgText, cColor.Grey, cChannel.General);
		END_IF
		IF  (cmdFaultReset AND NOT pStation^.FullInitRequired) OR cmdFullInit  THEN
			Local.NextState := 20;
			pStation^.SingleStep :=0;
		END_IF
	END_IF

20:	(*Unlatch Faults - Fault/Station Reset*)
	IF  Local.FirstEntry THEN
		pStation^.UnlatchFaults := TRUE;
		IF NOT SeparateAckAndReset THEN
			(*Send event fault acknowledge*)
			TempEvent.EType := Globals.cStats.FaultAcknowledge;
			F_SendEvent (ADR(Local.pStats^.StatsEventFIFO ), ADR(Local.pStats^.StatsEventBuffer), ADR(TempEvent));
		END_IF
	END_IF

	IF NOT pStation^.CycleFaulted AND NOT StationLevelFault THEN
		pStation^.UnlatchFaults := FALSE;		
		IF NOT pStation^.FullInitRequired THEN
			Local.NextState := 30;
		ELSE
			Local.NextState := 60;
		END_IF
	END_IF

30:	(*Fault Reset*)
	IF  Local.FirstEntry THEN
		pStation^.CycleReset := TRUE;
		MEMSET(ADR(pStation^.FirstFault),0,SIZEOF(pStation^.FirstFault)); (*clear first fault*)
		MsgText := 'Resetting...';
		AltMsgText := 'Alt: Restablecimiento...';
		pStation^.StationMessage.Text :=MsgText;
		pStation^.StationMessage.AltText :=AltMsgText;
		pStation^.StationMessage.Color := cColor.Green;
		F_AddMessage(pStation, MsgText, AltMsgText, cColor.Green, cChannel.General);
	END_IF

	IF  pStation^.ResetDone AND NOT pStation^.CycleFaulted THEN
		pStation^.CycleReset := FALSE;
		Local.NextState := 100;
	END_IF
	IF pStation^.CycleFaulted OR cmdFullInit THEN
		pStation^.CycleReset := FALSE;
		Local.NextState:= 0;
	END_IF

60:	(*Station Reset*)
	IF  Local.FirstEntry THEN
		pStation^.CycleReset := TRUE;
		MEMSET(ADR(pStation^.FirstFault),0,SIZEOF(pStation^.FirstFault)); (*clear first fault*)
		MsgText := 'Resetting...';
		AltMsgText := 'Alt: Restablecimiento...';
		pStation^.StationMessage.Text :=MsgText;
		pStation^.StationMessage.AltText :=AltMsgText;
		pStation^.StationMessage.Color := cColor.Green;
		F_AddMessage(pStation, MsgText, AltMsgText, cColor.Green, cChannel.General);
		TempEvent.EType := Globals.cStats.Initialize;
		F_SendEvent (ADR(Local.pStats^.StatsEventFIFO ), ADR(Local.pStats^.StatsEventBuffer), ADR(TempEvent));
	END_IF

	IF  pStation^.ResetDone AND NOT pStation^.CycleFaulted THEN
		pStation^.CycleReset := FALSE;
		pStation^.FullInitRequired := FALSE;
		Local.NextState := 100;
	END_IF
	IF pStation^.CycleFaulted  THEN
		pStation^.CycleReset := FALSE;
		Local.NextState:= 0;
	END_IF

100:	(*Idle*)
	IF  Local.FirstEntry THEN
		pStation^.StopRequest := FALSE;
		StationResetRequest := FALSE;
		TempEvent.EType := Globals.cStats.CycleTime;
		TempEvent.Data[0]  := 1; (*cancel any incomplete cycle time*)
		F_SendEvent (ADR(Local.pStats^.StatsEventFIFO ), ADR(Local.pStats^.StatsEventBuffer), ADR(TempEvent));
		(*Stack light flash green*)
		MsgText := 'Idle';
		AltMsgText := 'Ocioso';
		pStation^.StationMessage.Text :=MsgText;
		pStation^.StationMessage.AltText :=AltMsgText;
		pStation^.StationMessage.Color := cColor.Grey;
		F_AddMessage(pStation, MsgText, AltMsgText, cColor.Grey, cChannel.General);
	END_IF

	IF cmdStart AND OKToStart AND NOT pStation^.FullInitRequired THEN
		bStartingToRun:=TRUE;
		Local.NextState :=200;
	END_IF
	IF pStation^.CycleFaulted THEN
		Local.NextState :=0;
	END_IF
	IF cmdFullInit AND OKToReset THEN
		Local.NextState :=60;
	END_IF

200:	(*Running*)
	IF  Local.FirstEntry THEN
		pStation^.CycleAuto := TRUE;
		bStartingToRun:=FALSE;
		(*Stack light green*)
		MsgText := 'Running';
		AltMsgText := 'Running';
		pStation^.StationMessage.Text :=MsgText;
		pStation^.StationMessage.AltText :=AltMsgText;
		pStation^.StationMessage.Color := cColor.Green;
		F_AddMessage(pStation, MsgText, AltMsgText, cColor.Green, cChannel.General);
		(*Send Working event*)
		TempEvent.EType := Globals.cStats.Working;
		F_SendEvent (ADR(Local.pStats^.StatsEventFIFO ), ADR(Local.pStats^.StatsEventBuffer), ADR(TempEvent));
	END_IF
	IF cmdOperatorStop THEN
		Local.NextState :=210;
	END_IF
	IF pStation^.CycleFaulted OR cmdMachineStop  THEN
		Local.NextState :=220;
	END_IF

210:	(*Operator Stop Requested. Machine stopping*)
	IF  Local.FirstEntry THEN
		pStation^.StopRequest := TRUE;
		(*Start button flash green*)
		MsgText := 'Stopping...';
		AltMsgText := 'Alt: Parada...';
		pStation^.StationMessage.Text :=MsgText;
		pStation^.StationMessage.AltText :=AltMsgText;
		pStation^.StationMessage.Color := cColor.Green;
		F_AddMessage(pStation, MsgText, AltMsgText, cColor.Green, cChannel.General);
		TempEvent.EType := Globals.cStats.CycleTime;
		TempEvent.Data[0] := 1; (*cancel cycle timer*)
		F_SendEvent (ADR(Local.pStats^.StatsEventFIFO ), ADR(Local.pStats^.StatsEventBuffer), ADR(TempEvent));
	END_IF

	IF pStation^.OKToStop  THEN
		pStation^.CycleAuto := FALSE;
		IF pStation^.CycleFaulted THEN
			Local.NextState :=0;
		ELSE
			TempEvent.EType := Globals.cStats.OperatorStop;
			F_SendEvent (ADR(Local.pStats^.StatsEventFIFO ), ADR(Local.pStats^.StatsEventBuffer), ADR(TempEvent));
			Local.NextState := 100;
		END_IF
	END_IF

220:	(*Machine Stop Requested, or machine fault.. Machine stopping*)
	IF  Local.FirstEntry THEN
		pStation^.StopRequest := TRUE;
		(*Start button flash green*)
		TempEvent.EType := Globals.cStats.CycleTime;
		TempEvent.Data[0] := 1; (*cancel cycle timer*)
		F_SendEvent (ADR(Local.pStats^.StatsEventFIFO ), ADR(Local.pStats^.StatsEventBuffer), ADR(TempEvent));
	END_IF

	IF pStation^.OKToStop  THEN
		pStation^.CycleAuto := FALSE;
		IF pStation^.CycleFaulted   THEN
			Local.NextState :=0;
		ELSE
			TempEvent.EType := Globals.cStats.MachineStop;
			F_SendEvent (ADR(Local.pStats^.StatsEventFIFO ), ADR(Local.pStats^.StatsEventBuffer), ADR(TempEvent));
			Local.NextState := 100;
		END_IF
	END_IF
END_CASE

(*When a Control Power On PB is pressed, a Control Power Reset signal is sent to the Safety PLC.
  We delay before turning this signal off and checking for fault conditions.*)
tmrControlPowerPBPressedDelay(IN := (iControlPowerOnPB OR iGateResetPB OR 
								((tmrControlPowerPBPressedDelay.ET > T#0MS) AND NOT tmrControlPowerPBPressedDelay.Q)), PT := T#1000MS);
IF (tmrControlPowerPBPressedDelay.ET > T#0MS) AND (tmrControlPowerPBPressedDelay.ET < T#500MS) THEN
	oControlPowerReset := 1;
ELSE
	oControlPowerReset := 0;
END_IF

(*Station Level Fault Logic*)
(*Main Estop Relay and Doors*)
IF pStation^.EmergencyStop  THEN
	IF onsEStopNotOKHMIMessage THEN
		onsEStopNotOKHMIMessage := FALSE;
		FaultNumber := 2;
		FaultText := 'Emergency Stop';
		FaultAltText := 'Alt: Parada de emergencia';

		IF NOT iEstopMainEnclosurePBReleased AND NOT iWeighRightEStop THEN
			FaultNumber := 4;
			FaultText := CONCAT(FaultText, ' -Main Enclosure EStop PB pressed');
			FaultAltText := 'No Alt Text';
		END_IF
		IF iWeighRightEStop THEN
			FaultNumber := 14;
			FaultText := CONCAT(FaultText, ' -WeighRight EStop PB pressed');
			FaultAltText := 'No Alt Text';
		END_IF

	END_IF

	IF cmdStart OR cmdFaultReset OR cmdFullInit OR tmrControlPowerPBPressedDelay.Q THEN
		IF onsEStopNotOKStartAttmpt THEN
			onsEStopNotOKStartAttmpt := FALSE;			
			IF NOT iEStopOK THEN 
				MsgText := 'RESET or START attempted while EStops NOT Ok';
				AltMsgText := 'Alt: RESET o START intentado con la potencia de control no habilitada';
			ELSE
				onsPowerOnAttmpt := TRUE;;
			END_IF

			IF NOT iEstopMainEnclosurePBReleased THEN
				MsgText := 'RESET or START attempted while Main Enclosure ESTOP PB pressed';
				AltMsgText := 'Alt: Cabina de control Botón ESTOP presionado';
			END_IF
			IF iMovenCoolTankFull THEN
				MsgText := 'RESET or START attempted while Move N Coole Tank Full..';
				AltMsgText := 'Alt: ';			
			END_IF
			F_AddMessage(pStation, MsgText, AltMsgText, cColor.Red, cChannel.Attention);
		END_IF
	ELSE
		onsEStopNotOKStartAttmpt := TRUE;
		onsPowerOnAttmpt := FALSE;
	END_IF

ELSE
	IF onsPowerOnAttmpt THEN
		MsgText := ' ';
		AltMsgText := ' ';
		F_AddMessage(pStation, MsgText, AltMsgText, cColor.Grey, cChannel.General);
	END_IF
	onsEStopNotOKStartAttmpt := TRUE;
	onsEStopNotOKHMIMessage := TRUE;
	onsPowerOnAttmpt := FALSE;
END_IF

(*Main Air*)
IF NOT pStation^.EmergencyStop THEN // AND NOT iAirSupplyOK THEN
// tmrAirPressureNotOK(IN := pStation^.CycleAuto OR pStation^.CycleReset OR pStation^.CycleManual, PT := T#3.0s);
//	IF tmrAirPressureNotOK.Q THEN
//		IF onsAirNotOKHMIMessage THEN
//			onsAirNotOKHMIMessage := FALSE;
//			FaultNumber := 8;
//			FaultText := 'Air pressure NOT Ok';
//			FaultAltText := 'Alt: Pérdida de la presión de aire de la estación';
//		END_IF
//	ELSE
//		onsAirNotOKHMIMessage := TRUE;
//	END_IF
IF iMovenCoolTankFull THEN
	tmrMoveNCoolTankNotOK(IN := pStation^.CycleAuto OR pStation^.CycleReset OR pStation^.CycleManual, PT := T#2.0S);
	FaultNumber := 15;
	MsgText := 'START attempted with Move And Cool Tank Full or Not Present..';
	AltMsgText := 'Atl: START intentado con pérdida de presión de aire';
	F_AddMessage(pStation, MsgText, AltMsgText, cColor.Yellow, cChannel.Attention);
END_IF
	IF cmdStart OR cmdFaultReset OR cmdFullInit THEN
		IF onsAirNotOKStartAttempt THEN
			onsAirNotOKStartAttempt := FALSE;
			MsgText := 'START attempted with loss of air pressure';
			AltMsgText := 'Atl: START intentado con pérdida de presión de aire';
			F_AddMessage(pStation, MsgText, AltMsgText, cColor.Red, cChannel.Attention);
		END_IF
	ELSE
		onsAirNotOKStartAttempt := TRUE;
	END_IF
ELSE
	onsAirNotOKHMIMessage := TRUE;
	onsAirNotOKStartAttempt := TRUE;
	tmrAirPressureNotOK(IN := FALSE);
END_IF

(*EStop Safety EDM Error*) // if applicable Device attached
//IF iEStopSafetyEDMError THEN
//	IF onsEStopSafetyEDMErrorHMIMessage THEN
//		onsEStopSafetyEDMErrorHMIMessage := FALSE;
//		FaultNumber := 9;
//		FaultText := 'EStop safety EDM Error - check safety circuit';
//		FaultAltText := 'No Alt Text';
//	END_IF
//
//	IF cmdStart OR cmdFaultReset OR cmdFullInit OR tmrControlPowerPBPressedDelay.Q THEN
//		IF onsEStopSafetyEDMErrorStartAttempt THEN
//			onsEStopSafetyEDMErrorStartAttempt := FALSE;
//			MsgText := 'START attempted with EStop safety EDM Error - check safety circuit';
//			AltMsgText := 'No Alt Text';
//			F_AddMessage(pStation, MsgText, AltMsgText, cColor.Yellow, cChannel.Attention);
//		END_IF
//	ELSE
//		onsEStopSafetyEDMErrorStartAttempt := TRUE;
//	END_IF
//ELSE
//	onsEStopSafetyEDMErrorHMIMessage := TRUE;
//	onsEStopSafetyEDMErrorStartAttempt := TRUE;
//END_IF

(*Post station level fault*)
IF FaultNumber <> 0 AND  NOT StationLevelFault THEN
	StationLevelFault := TRUE;
	FaultData.FaultID := FaultNumber;
	FaultData.TimeStamp := Globals.gCurrentTime;
	MsgText :=  'Fault: ';
	AltMsgText  := 'AltFault: ';
	MsgText := CONCAT(MsgText,DINT_TO_STRING(FaultData.FaultID));
	MsgText := CONCAT(MsgText,' ');
	MsgText := CONCAT(MsgText, FaultText);
	AltMsgText := CONCAT(AltMsgText,DINT_TO_STRING(FaultData.FaultID));
	AltMsgText := CONCAT(AltMsgText,' ');
	AltMsgText:=CONCAT(AltMsgText, FaultAltText);
	F_AddMessage(pStation, MsgText, AltMsgText, cColor.Red, cChannel.Fault);
	IF pStation^.FirstFault.FaultID = 0 THEN
		pStation^.FirstFault := FaultData;
		pStation^.FirstFault.StationID  := pStation^.StationID;
		pStation^.FirstFault.StringData[0] :=MsgText;
		pStation^.FirstFault.StringData[1] :=AltMsgText;
	END_IF
END_IF

IF pStation^.UnlatchFaults THEN
	FaultNumber := 0;
	StationLevelFault := FALSE;
END_IF

(*Outputs*)
IF (pStation^.CycleFaulted AND b500msPulse) OR hiTestIndicatorTree THEN
	oStackLightRed := TRUE;
ELSIF oStackLightRed THEN
	oStackLightRed := FALSE;
END_IF

IF (NOT pStation^.CycleFaulted AND (pStation^.CycleAuto OR (NOT pStation^.CycleAuto AND b500msPulse))) 
  OR hiTestIndicatorTree THEN
	oStackLightGreen := TRUE;
ELSIF oStackLightGreen THEN
	oStackLightGreen := FALSE;
END_IF

IF (pStation^.Attention AND b500msPulse) OR hiTestIndicatorTree THEN
	oStackLightYellow := TRUE;
ELSIF oStackLightYellow THEN
	oStackLightYellow := FALSE;
END_IF

IF ((Local.State = 0) AND b500msPulse) OR hiTestIndicatorTree THEN
	oStackLightHorn := TRUE;
ELSIF oStackLightHorn THEN
	oStackLightHorn := FALSE;
END_IF

(*Turn on the Control Power On lights if Control Power is On, system air pressure is ok, and there are no safety EDM errors*)
IF (iEStopOK AND iAirSupplyOK AND NOT iEStopSafetyEDMError AND NOT iEStopGateSafetyEDMError 
  AND NOT iSortingConveyorSafetyEDMError) OR hiTestIndicatorTree THEN
	IF iEStopGateOK OR b500msPulse THEN
		oControlPowerOnPBLT := 1;
		oGateResetPBLT := 1;
	ELSE
		oControlPowerOnPBLT := 0;
		oGateResetPBLT := 0;
	END_IF
ELSE
	oControlPowerOnPBLT := 0;
	oGateResetPBLT := 0;	
END_IF

Globals.gStn100FaultedNotAck := Local.State = 0;

hoStationDryCycleEnabled := hiStationDryCycleEnable;
pStation^.DryCycle := hiStationDryCycleEnable;
pStation^.EmergencyStop := NOT iEStopOK OR iWeighRightEStop;

IF (pStation^.CycleAuto OR pStation^.CycleReset OR bStartingToRun) AND NOT pStation^.EmergencyStop THEN
	oGateLock := TRUE;
ELSIF pStation^.OKForManual THEN	(*Manual operation*)
	IF hiGateLock THEN
		oGateLock:=TRUE;
	END_IF
	IF hiGateUnlock THEN
		oGateLock:=FALSE;
	END_IF
ELSIF oGateLock THEN
	oGateLock := FALSE;
END_IF

(*1/2 second pulse generator*)
tmrPulseON(IN:=NOT tmrPulseOFF.Q,PT:=T#0.5s);
tmrPulseOFF(IN:=tmrPulseON.Q,PT:=T#0.5s);
IF tmrPulseON.Q THEN
	b500msPulse := TRUE;
ELSE
	b500msPulse := FALSE;
END_IF
pStation^.b500msPulse := b500msPulse;

(*Clear status fifo buffers*)
pStation^.AttentionRequiredFIFO.INIT(pFIFO:=ADR(pStation^.AttentionRequiredFIFOBuffer));
pStation^.NotOKtoStopFIFO.INIT(pFIFO:=ADR(pStation^.NotOKToStopFIFOBuffer));
pStation^.FaultedFIFO.INIT(pFIFO:=ADR(pStation^.FaultedFIFOBuffer));
pStation^.CycleManualFIFO.INIT(pFIFO:=ADR(pStation^.CycleManualFIFOBuffer));

(*Reset all manual bits*)
hiGateLock := 0;
hiGateUnlock :=0;]]></ST>
    </Implementation>
    <Action Name="Input" Id="{592f173c-b306-44f8-972d-7b86b260c6c3}">
      <Implementation>
        <ST><![CDATA[onsStart(CLK:=(pStation^.hiCycleStart OR Globals.iCycleStart));
cmdStart := onsStart.Q;
pStation^.hiCycleStart:=FALSE;

onsOperatorStop(CLK:=(pStation^.hiCycleStop OR Globals.iCycleStop));
cmdOperatorStop := onsOperatorStop.Q;
pStation^.hiCycleStop:=FALSE;

(*Machine stop receives signals from other stations or SCADA*)
onsMachineStop(CLK:=FALSE);
cmdMachineStop := pStation^.MachineStopRqst;
pStation^.MachineStopRqst := FALSE;

onsFaultAcknowledge(CLK:=(pStation^.hiFaultAck));
cmdFaultAcknowledge := onsFaultAcknowledge.Q;
pStation^.hiFaultAck:=FALSE;

onsFaultReset(CLK:=(pStation^.hiFaultReset));
cmdFaultReset :=onsFaultReset.Q;
pStation^.hiFaultReset:=FALSE;

onsStationReset(CLK:=(pStation^.hiStationReset));
cmdFullInit := onsStationReset.Q;
pStation^.hiStationReset:=FALSE;

onsSingleStepOn(CLK:=(pStation^.hiSingleStepON ));
cmdSingleStepOn := onsSingleStepOn.Q;
pStation^.hiSingleStepON:=FALSE;

onsSingleStepOff(CLK:=(pStation^.hiSingleStepOff ));
cmdSingleStepOff := onsSingleStepOff.Q;
pStation^.hiSingleStepOff:=FALSE;

onsSingleStepAdvance(CLK:=(pStation^.hiSingleStepAdvance ));
cmdSingleStepAdvance := onsSingleStepAdvance.Q;
pStation^.hiSingleStepAdvance:=FALSE;

onsManualMode(CLK:=(pStation^.hiManualMode ));
cmdManualMode := onsManualMode.Q;
pStation^.hiManualMode:=FALSE;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="Stn100_00_ModeControl">
      <LineId Id="3" Count="2" />
      <LineId Id="1091" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="1431" Count="0" />
      <LineId Id="1433" Count="0" />
      <LineId Id="9" Count="2" />
      <LineId Id="14" Count="1" />
      <LineId Id="749" Count="0" />
      <LineId Id="16" Count="5" />
      <LineId Id="2127" Count="0" />
      <LineId Id="2130" Count="0" />
      <LineId Id="2128" Count="0" />
      <LineId Id="2528" Count="0" />
      <LineId Id="2524" Count="0" />
      <LineId Id="750" Count="0" />
      <LineId Id="1293" Count="1" />
      <LineId Id="3014" Count="0" />
      <LineId Id="1887" Count="0" />
      <LineId Id="3265" Count="1" />
      <LineId Id="759" Count="0" />
      <LineId Id="751" Count="7" />
      <LineId Id="882" Count="0" />
      <LineId Id="24" Count="15" />
      <LineId Id="48" Count="7" />
      <LineId Id="1286" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="2013" Count="0" />
      <LineId Id="2896" Count="0" />
      <LineId Id="59" Count="8" />
      <LineId Id="71" Count="0" />
      <LineId Id="760" Count="0" />
      <LineId Id="77" Count="3" />
      <LineId Id="82" Count="13" />
      <LineId Id="97" Count="4" />
      <LineId Id="637" Count="0" />
      <LineId Id="102" Count="10" />
      <LineId Id="114" Count="30" />
      <LineId Id="149" Count="2" />
      <LineId Id="153" Count="9" />
      <LineId Id="1287" Count="1" />
      <LineId Id="164" Count="0" />
      <LineId Id="1290" Count="1" />
      <LineId Id="1289" Count="0" />
      <LineId Id="165" Count="2" />
      <LineId Id="169" Count="18" />
      <LineId Id="203" Count="1" />
      <LineId Id="206" Count="23" />
      <LineId Id="231" Count="24" />
      <LineId Id="280" Count="49" />
      <LineId Id="331" Count="19" />
      <LineId Id="1245" Count="1" />
      <LineId Id="2006" Count="0" />
      <LineId Id="2017" Count="0" />
      <LineId Id="1247" Count="0" />
      <LineId Id="1252" Count="0" />
      <LineId Id="1259" Count="0" />
      <LineId Id="1248" Count="1" />
      <LineId Id="1260" Count="0" />
      <LineId Id="351" Count="2" />
      <LineId Id="2779" Count="0" />
      <LineId Id="356" Count="3" />
      <LineId Id="2777" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="1098" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="1093" Count="0" />
      <LineId Id="368" Count="1" />
      <LineId Id="3270" Count="0" />
      <LineId Id="3273" Count="1" />
      <LineId Id="3271" Count="1" />
      <LineId Id="766" Count="0" />
      <LineId Id="373" Count="9" />
      <LineId Id="769" Count="0" />
      <LineId Id="384" Count="4" />
      <LineId Id="3140" Count="0" />
      <LineId Id="3144" Count="0" />
      <LineId Id="3141" Count="1" />
      <LineId Id="395" Count="31" />
      <LineId Id="3138" Count="0" />
      <LineId Id="3137" Count="0" />
      <LineId Id="3135" Count="1" />
      <LineId Id="3133" Count="1" />
      <LineId Id="427" Count="14" />
      <LineId Id="1102" Count="1" />
      <LineId Id="1106" Count="5" />
      <LineId Id="1115" Count="13" />
      <LineId Id="1130" Count="0" />
      <LineId Id="1143" Count="1" />
      <LineId Id="444" Count="2" />
      <LineId Id="636" Count="0" />
      <LineId Id="447" Count="21" />
      <LineId Id="470" Count="1" />
      <LineId Id="473" Count="5" />
      <LineId Id="1662" Count="0" />
      <LineId Id="479" Count="9" />
      <LineId Id="1265" Count="8" />
      <LineId Id="1664" Count="0" />
      <LineId Id="1275" Count="0" />
      <LineId Id="1277" Count="0" />
      <LineId Id="1279" Count="3" />
      <LineId Id="1278" Count="0" />
      <LineId Id="1283" Count="2" />
      <LineId Id="1276" Count="0" />
      <LineId Id="489" Count="2" />
      <LineId Id="498" Count="0" />
      <LineId Id="500" Count="30" />
      <LineId Id="1261" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Stn100_00_ModeControl.Input">
      <LineId Id="2" Count="38" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>